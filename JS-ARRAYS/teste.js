// const numero1 = 50;
// const numero2 = 43;
// const numero3 = 12;

// // utilizando array
// const numeros = [50, 43, 12];

// const arrayDeNumeros = [50, 43, 12];
// const arrayDeStrings = ["banana", "alura", "Juliana"];

// // √≠ndice     0   1   2   3
// const nums = [50, 43, 12, 98];
// console.log(nums.length) //4

// concat()
// Junta dois arrays, colocando o array passado como argumento, logo depois do primeiro. Em portugu√™s essa opera√ß√£o √© conhecida como concatena√ß√£o.
// N√£o altera o array no qual foi chamado, ent√£o precisamos salvar esse resultado em um novo array.

// filter()
// Retorna uma lista contando todos os elementos que passaram em um teste, ou seja, uma fun√ß√£o escrita por n√≥s.
// N√£o altera o array onde foi chamado, ent√£o precisamos salvar esse resultado em um novo array.

// find()
// Funciona de forma parecida com o filter, por√©m retorna apenas o primeiro valor que satisfizer o teste, podendo ser uma string ou um n√∫mero.

// findIndex()
// Funciona igual o find(), mas retorna o √≠ndice em vez do elemento, possibilitando us√°-lo em outras partes do c√≥digo.

// lastIndexOf()
// √â igual o findIndex() por√©m come√ßa do √∫ltimo elemento, n√£o no primeiro.

// forEach()
// Executa uma fun√ß√£o em cada elemento do array de forma individual.
// N√£o altera o array original e nem retorna um valor, deixando esse trabalho a cargo da fun√ß√£o escolhida.

// pop()
// Retira o √∫ltimo elemento do array.
// Altera o array original removendo o elemento.

// shift()
// Retira o primeiro elemento do array.
// Altera o array original removendo o elemento e trocando o √≠ndice de todos os elementos para um a menos do que eram, o √≠ndice 1 passa a ser o 0, o 2 passa a ser o 1, e assim por diante.

// push()
// Adiciona o elemento passado como par√¢metro do array, por√©m na √∫ltima posi√ß√£o.
// Altera o array original com o novo valor.

// unshift()
// Funciona igual ao push(), por√©m adiciona na primeira posi√ß√£o e acaba trocando o √≠ndice de todos os elementos.
// Altera o array original com o novo valor.

// reduce()
// Utiliza uma fun√ß√£o definida pelo usu√°rio em cada um dos elementos, guardando o resultado em uma vari√°vel que pode ser acessada dentro da fun√ß√£o que foi definida, retornando um √∫nico valor no final, reduzindo o array para um √∫nico valor.

// reduceRight()
// Funciona igual o reduce() por√©m come√ßa do final do array e segue at√© o in√≠cio.

// reverse()
// Inverte a ordem dos elementos do array, ent√£o o primeiro vira o √∫ltimo, o segundo o pen√∫ltimo e assim por diante.

// slice()
// Copia uma parte do array para outro array.

// sort()
// Organiza o array de acordo com a classifica√ß√£o Unicode, onde os n√∫meros v√™m antes das letras, por√©m n√£o funciona corretamente para n√∫meros, onde temos que definir uma fun√ß√£o que ir√° auxiliar o comando.

// splice()
// Consegue remover, um ou mais elementos consecutivos caso o segundo par√¢metro tenha um valor maior que 0, e incluir um ou mais elementos a partir de um √≠ndice escolhido.

// As caracter√≠sticas principais de arrays:
// Um array √© uma lista ordenada de dados. Voc√™ aprendeu a sintaxe de como criar um array e acessar seus valores.
// Os conceitos de elemento e √≠ndice:
// Elementos s√£o os valores que um array guarda, e √≠ndice √© o identificador √∫nico e num√©rico de cada elemento do array.
// Como utilizar a propriedade .length:
// Todos os arrays do JavaScript possuem essa propriedade, que indica a quantidade de elementos do array.
// Como utilizar os m√©todos .push() e .pop():
// Vimos como realizar as primeiras altera√ß√µes em um array, como adicionar um novo item ao final ou remover o √∫ltimo item.

// Remover e incluir novos elementos em um array com splice(); sendo que esse m√©todo permite remover elementos de qualquer posi√ß√£o do array.
// animaisDoAquario = ['üêã', 'üêô', 'üê¨', 'ü¶à']

// animaisDoAquario.splice(1,0,'üê†')
// animaisDoAquario.splice(3,2,'üêü')

// console.log(animaisDoAquario)


// const nomes = ["Ana", "Juliana", "Leonardo"];
// const idades = [30, 35, 28];
// const faculdade = [false, true, true];

// const funcionarios = [nomes, idades, faculdade];

// console.log ( `O nome do alune √© ${funcionarios[0][1]} e a idade dele √© ${funcionarios[1][1]} `)

// Utilizar os m√©todos includes() e indexOf():
// O includes() retorna true ou false, dependendo se o valor passado como par√¢metro est√° presente ou n√£o no array. O indexOf() retorna a posi√ß√£o no array do valor passado como par√¢metro. Utilizamos esses dois m√©todos em conjunto para primeiro verificar se um aluno estava presente em uma lista, e depois obter sua posi√ß√£o para buscar sua nota em outra lista.
// Utilizar a estrutura for e entender seu funcionamento:
// O for √© constitu√≠do de tr√™s express√µes: cria√ß√£o da vari√°vel de controle; condi√ß√£o de execu√ß√£o; modifica√ß√£o da vari√°vel de controle. Essas tr√™s express√µes juntas definem quantas vezes o bloco do for ser√° executado.
// Utilizar a estrutura for of e entender a diferen√ßa em rela√ß√£o ao for:
// O for of sempre √© utilizado para percorrer todos os elementos de um array, do in√≠cio ao fim. Para esses casos, o for of √© mais conciso que o for.

Array 
√â utilziado para guardar dados, agrupar e organizar.
Ter um espa√ßo fixo na memoria do pc, porem n√£o s√£o fixos os tamanhos e os tipos, pois podem ser alterados ,retirados, mudados ou removidos. 
Um bom exemplo √© - s√£o varios vag√µes de trens, cada um tem um elemento ou estrutra especifica dentro dele, seja objeto, numero, string.






POO
Linguagens que tem POO - C++/Java/PHP/Python/Ruby e Microsoft/Apple tem suas linguagens com POO

Vatagens 
COMERNada
C - confiavel - Ele isola as partes, para caso uma parte seja alterada, outra n√£o ser afetada.
O - oportuno - Por estar em varias partes, elas sao desenvolvidas idenpentes das outras partes.
M - manutenivel - a manuten√ß√£o √© mais facil
E - extensivel - Sempre est√° atualizando e se desenvolvendo
R - reutilizavel - Ao criar uma classe em um projeto posso utilizar em outro projeto.
N - natural - Sempre facil de entender, a funcionalidade √© mais simples do que os detalhes de implementa√ß√£o.


Classes
Uma Classe √© uma descri√ß√£o de um conjunto de objetos que compartilham os mesmos atributos, opera√ß√µes, relacionamentos e sem√¢ntica.
Uma classe precisa responder 3 perguntas:
coisas que eu tenho? - Atributo
Um atributo √© uma vari√°vel que pertence a um objeto. Os dados de um objeto s√£o armazenados nos seus atributos.

coisas que eu fa√ßo? - Metodo 
Os m√©todos s√£o as a√ß√µes que o objeto pode realizar

como estou agora ? - Estado 
O estado de um objeto √© representado pelas vari√°veis definidas na pr√≥pria classe.

Sendo eles:
Concreto: que existe fisicamente.
Abstrato: √© um conceito.
